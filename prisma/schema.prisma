// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified  DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  username      String?
  password      String?
  avatar        String?
  sessionInvalidatedAt DateTime?
  // Relations
  documents     Document[]
  chatSessions  ChatSession[]
  sessions      Session[]
  accounts      Account[]
  @@map("user")
}

model Document {
  id           String        @id @default(cuid())
  userId       String
  filename     String
  url          String
  metadata     Json?
  uploadedAt   DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatSessions ChatSession[]
  @@index([userId])
}

model ChatSession {
  id           String     @id @default(cuid())
  userId       String
  documentId   String?    // Now optional; null means "general chat"
  title        String?    // Allow setting a chat title for “Previous Chats” menu
  messages     Json       // Array of turn-by-turn chats/messages/AI responses (could normalize further if you want; simple for now)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  document     Document?  @relation(fields: [documentId], references: [id])
  // Useful for ordering recent chats
  @@index([userId, createdAt])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  token      String
  value      String?
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@unique([identifier, token])
  @@map("verification")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  token        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ipAddress    String?
  userAgent    String?
  @@unique([token])
  @@map("session")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @map("refreshToken")
  access_token       String?  @map("accessToken")
  expires_at         Int?     @map("expiresAt")
  token_type         String?  @map("tokenType")
  scope              String?
  id_token           String?  @map("idToken")
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("account")
}


